// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/service.go -destination=mocks/services_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/quanergyO/ab_test_platform/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockIGenerator is a mock of IGenerator interface.
type MockIGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockIGeneratorMockRecorder
	isgomock struct{}
}

// MockIGeneratorMockRecorder is the mock recorder for MockIGenerator.
type MockIGeneratorMockRecorder struct {
	mock *MockIGenerator
}

// NewMockIGenerator creates a new mock instance.
func NewMockIGenerator(ctrl *gomock.Controller) *MockIGenerator {
	mock := &MockIGenerator{ctrl: ctrl}
	mock.recorder = &MockIGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGenerator) EXPECT() *MockIGeneratorMockRecorder {
	return m.recorder
}

// GeneratePlugin mocks base method.
func (m *MockIGenerator) GeneratePlugin(spec models.ABTestSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePlugin", spec)
	ret0, _ := ret[0].(error)
	return ret0
}

// GeneratePlugin indicates an expected call of GeneratePlugin.
func (mr *MockIGeneratorMockRecorder) GeneratePlugin(spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePlugin", reflect.TypeOf((*MockIGenerator)(nil).GeneratePlugin), spec)
}
